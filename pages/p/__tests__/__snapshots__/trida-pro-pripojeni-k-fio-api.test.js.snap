// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-1056554702"
    >
      Třída pro připojení k FIO API
    </h1>
    <div
      className="jsx-1056554702 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Další užitečný úryvek, který je škoda nechat ležet v Git repozitářích.
A opět uzpůsobený pro používání s Nette FW.</p>
<p>Nedávno jsem psal o tom, jak používat CLI router v Nette (<a href=\\"http://zlml.cz/nette-2-1-dev-clirouter\\">http://zlml.cz/nette-2-1-dev-clirouter</a>).
Právě pomocí tohoto routeru je vhodné kontrolovat bankovní výpisy - například pomocí cronu:</p>
<pre><code class=\\"lang-php\\">&lt;?php

namespace App\\\\CliModule;

use Nette;
use Nette\\\\Diagnostics\\\\Debugger;

/**
 * Class CliPresenter
 * @package App\\\\CliModule
 */
class CliPresenter extends BasePresenter {

        /** @var \\\\Fio @inject */
        public $fio;
        ...

        public function actionCron() {
                $this-&gt;checkFio(); // FIO vs. nezaplacené objednávky
                ...
                $this-&gt;terminate();
        }

        /**
         * Zkontroluje bankovní účet, porovná s databází a zaplacené objednávky změní na status PAID.
         */
        private function checkFio() {
                try {
                        $transactions = $this-&gt;fio-&gt;transactions();
                        $unpaid = $this-&gt;orders-&gt;selectUnpaidOrders(); //získání nezaplacených objednávek
                        //array_intersect() - zde samotné zpracování
                        ...
                } catch (\\\\Exception $exc) {
                        Debugger::log($exc-&gt;getMessage() . &#39; FILE: &#39; . $exc-&gt;getFile() . &#39; on line: &#39; . $exc-&gt;getLine(), Debugger::WARNING);
                        echo $exc-&gt;getMessage() . EOL;
                }
        }
}
</code></pre>
<p>K tomu se hodí právě následující třída:</p>
<pre><code class=\\"lang-php\\">&lt;?php

/**
 * Class Fio
 */
class Fio extends \\\\Nette\\\\Object {

        private $token;
        private $rest_url = &#39;https://www.fio.cz/ib_api/rest/&#39;;

        /**
         * @param string $token SECURE
         */
        public function __construct($token) {
                $this-&gt;token = $token;
        }

        /**
         * Pohyby na účtu za určené období.
         * JSON only!
         * @param string $from
         * @param string $to
         * @return array|mixed
         */
        public function transactions($from = &#39;-1 month&#39;, $to = &#39;now&#39;) {
                $from = \\\\Nette\\\\DateTime::from($from)-&gt;format(&#39;Y-m-d&#39;);
                $to = \\\\Nette\\\\DateTime::from($to)-&gt;format(&#39;Y-m-d&#39;);
                $url = $this-&gt;rest_url . &#39;periods/&#39; . $this-&gt;token . &#39;/&#39; . $from . &#39;/&#39; . $to . &#39;/transactions.json&#39;;
                return $this-&gt;parseJSON($this-&gt;download($url));
        }

        /**
         * Oficiální výpisy pohybů z účtu.
         * JSON only!
         * @param $id
         * @param null $year
         * @return array|mixed
         */
        public function transactionsByID($id, $year = NULL) {
                if ($year === NULL) {
                        $year = date(&#39;Y&#39;);
                }
                $url = $this-&gt;rest_url . &#39;by-id/&#39; . $this-&gt;token . &#39;/&#39; . $year . &#39;/&#39; . $id . &#39;/transactions.json&#39;;
                return $this-&gt;parseJSON($this-&gt;download($url));
        }

        /**
         * Pohyby na účtu od posledního stažení.
         * JSON only!
         * @return array|mixed
         */
        public function transactionsLast() {
                $url = $this-&gt;rest_url . &#39;last/&#39; . $this-&gt;token . &#39;/transactions.json&#39;;
                return $this-&gt;parseJSON($this-&gt;download($url));
        }

        /**
         * @param $url
         * @return mixed
         * @throws \\\\Exception
         */
        private function download($url) {
                if (!extension_loaded(&#39;curl&#39;)) {
                        throw new \\\\Exception(&#39;Curl extension, does\\\\&#39;t loaded.&#39;);
                }
                $curl = curl_init();
                curl_setopt($curl, CURLOPT_URL, $url);
                curl_setopt($curl, CURLOPT_HEADER, FALSE);
                curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
                curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
                curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);
                $result = curl_exec($curl);
                return $result;
                //return file_get_contents($url); //ALTERNATIVE
        }

        /**
         * @param $data
         * @return array|mixed
         */
        private function parseJSON($data) {
                $json = json_decode($data);
                if($json === NULL) {
                        //Moc ryhlé požadavky na Fio API
                        throw new \\\\Exception(&#39;Fio API overheated. Please wait...&#39;);
                        //Když se posílá stále moc požadavků, tak se to z Exception nikdy nevyhrabe. Musí se opravdu počkat.
                }
                if(!$json-&gt;accountStatement-&gt;transactionList) {
                        return $json; // There are no transactions (header only)
                }
                $payments = array();
                foreach ($json-&gt;accountStatement-&gt;transactionList-&gt;transaction as $row) {
                        $out = array();
                        foreach ($row as $column) {
                                if ($column) {
                                        $out[$column-&gt;id] = $column-&gt;value; //v $column-&gt;name je název položky
                                        /*
                                         * 0  - Datum
                                         * 1  - Částka (!)
                                         * 5  - Variabilní symbol (!)
                                         * 14 - Měna (!)
                                         * Hodnoty (!) se musí použít ke kontrole správnosti...
                                         */
                                }
                        }
                        array_push($payments, $out);
                }
                return $payments;
        }

}
</code></pre>
<p>S tím, že je zapotřebí předat FIO klíč z neonu. FIO třída se automaticky injectuje, tzn. že i konstruktor
této třídy bude doplněn automaticky. Je jen zapotřebí přidat do neonu onu konfiguraci:</p>
<pre><code class=\\"lang-neon\\">parameters:
    fio_token: &#39;&#39; #token pro přístup do FIO banky

...

services:
    - Fresh\\\\Fio(token: %fio_token%)

...
</code></pre>
<p>Bylo by vhodné upozornit na fakt, že se jedná pouze o read-only přístup, tzn. že neexistují žádné funkce
pro zápis (ačkoliv existuje něco jako datumová zarážka). Díky tomu je možné použít takovéto nízkoúrovňové
zabezpečení pomocí jednoho tokenu.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Ftrida-pro-pripojeni-k-fio-api%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
