// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-1056554702"
    >
      Nadvláda inteligentních procesorů
    </h1>
    <div
      className="jsx-1056554702 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Pár dní zpátky jsem tweetoval o tom, nad čím právě teď trávím asi nejvíce času. Cílem celého mého snažení je dostat data z procesoru, který obsluhuje různé periferie na základní desce až do webového prohlížeče a zpět - vše v reálném čase. Právě dnes jsem dosáhl prvního milníku, tedy dostal jsem nějaká skutečně smysluplná data do prohlížeče a rád bych zde nastínil jak jsem postupoval a jaké technologie jsem volil. Již dříve se totiž ukázalo, že některé reakce na mé články jsou skutečně konstruktivní a tedy i velmi přínosné... (-:</p>
<p><blockquote class=\\"twitter-tweet\\" lang=\\"en\\"><p>Procesor ➡Ethernet ➡NodeJS ➡Redis ➡ExpressJS ➡Socket.IO ➡Browser ✅ <a href=\\"http://t.co/MAIlmMZEL9\\">pic.twitter.com/MAIlmMZEL9</a></p>&mdash; Martin Zlámal (@mrtnzlml) <a href=\\"https://twitter.com/mrtnzlml/status/531104236571230208\\">November 8, 2014</a></blockquote></p>
<script async src=\\"//platform.twitter.com/widgets.js\\" charset=\\"utf-8\\"></script>

<h2 id=\\"n-kolik-slep-ch-uli-ek\\">Několik slepých uliček <a href=\\"#n-kolik-slep-ch-uli-ek\\">#</a></h2><p>Původně byl celý nápad úplně jiný a rozhodně ne real-time. A stejně jako je teď velký trend stavět vše pomocí <em>Raspberry Pi</em> nebo pomocí <em>Arduino</em>, tak i já jsem tak chtěl učinit. Důvod je jednoduchý. Napsat se s pomocí těchto desek dá všelicos velmi rychle a nestojí to moc námahy. Navíc jsem chtěl více času věnovat webové aplikaci, než nějakému mikročipu. Postupem času a po několika vážných rozhovorech jsem začal přemýšlet nad real-time přenosem informace v obou směrech. Takže bylo zapotřebí najít vhodnou desku. Jenže na real-time už jsem si jen s <em>Raspberry</em> nevěřil a proto jsem hledal nějakou lepší desku na kterou bych nahodil nějaký velmi lehký Linux a NodeJS. Po dalších vážných rozhovorech jsem však i z této cesty ustoupil a zvolil jsem něco, co jsem ze začátku vůbec neuvažoval. Chtěl jsem zvolit desky od ST z řady <a href=\\"www.st.com/stm32nucleo\\">Nucleo</a>, ale tyto desky nemají ethernet a tak bylo lehčí vypůjčit si <a href=\\"www.st.com/stm3220g-eval\\">eval-boardy</a>. Tyto desky mají stejné procesory, ale více periferií okamžitě k dispozici. Jenže to znamená, že musím opustit všechno hraní si a hluboce se ponořit do <strong>C</strong>čka...</p>
<h2 id=\\"spr-vn-uli-ka-\\">Správná ulička? <a href=\\"#spr-vn-uli-ka-\\">#</a></h2><p>Desky a procesory jsou tedy jasné. Co dál? Nezbývá než stanovit, jak se bude informace přenášet až do prohlížeče. Zde je zřejmě jasná věc to, že mezi procesorem a prohlížečem musí být nějaký mezičlen. Ten u mě tvoří <a href=\\"http://nodejs.org/\\">NodeJS</a> server v kombinaci s <a href=\\"http://redis.io/\\">Redis</a> databází zhruba tak, jak je znázorněno na <a href=\\"http://cs.wikipedia.org/wiki/ASCII_art\\">ASCII artu</a> níže:</p>
<pre><code>------------      ----------      -----------
| Procesor | ---&gt; | NodeJS | ---&gt; | Browser |
------------      ----------      -----------
        |             ^
        |             |
        |         ---------
        --------&gt; | Redis |
                  ---------
</code></pre><p>Jak celý přenos v současné chvíli probíhá? Procesor je teď aktivním prvkem, tzn. sbírá nějaká potřebná data (např. pomocí ADC snímá polohu natočení potenciometru) a pomocí UDP datagramů je odesílá na jasně danou IP adresu NodeJS serveru, kde se informace z datagramu uloží do dané struktury v Redis databázi. Tyto datagramy se skládají z klasické UDP hlavičky a datové části. Ta je v <a href=\\"http://redis.io/topics/protocol\\">RESP</a> formátu, takže teoreticky bude někdy později možné NodeJS server úplně přeskočit a data ukládat přímo z procesoru do databáze jak je na diagramu naznačeno. Server však nikdy nepůjde úplně odstranit, protože na NodeJS serveru běží v této chvíli UDP server, ale také tam běží webový server (<a href=\\"http://expressjs.com/\\">ExpressJS</a>), který mi umožňuje rovnou vytvořit webovou stránku a s pomocí <a href=\\"http://socket.io/\\">Socket.IO</a> si mohu otevřít websocket a z databáze opět informace odesílat bleskovou rychlostí do prohlížeče, kde je mohu javascriptem nějak dále zpracovat.</p>
<h2 id=\\"k-emu-to-cel-je-\\">K čemu to celé je? <a href=\\"#k-emu-to-cel-je-\\">#</a></h2><p>Nevím. (-: Tento článek jsem napsal proto, abych si utřídil myšlenky a získal zpětnou vazbu. Celý projekt měl však původně být pro tzv. inteligentní domy, kdy by stačilo dům pouze zasíťovat a vše ostatní by již bylo vlastně hotovo (přes ethernet lze i napájet). Výhodné je to v tom, že můžete kdykoliv jakýkoliv prvek domácnosti odpojit, dát ho na jiné místo (v rámci IP rozsahu) a vše by stále fungovalo. Jenže jak často přesouváte vypínače (termostaty, světla, senzory)? Proto se chci spíše zaměřit na objekty kde se tyto věci často řeší, proto vidím správný směr spíše v (relativně) často se měnících kancelářských budovách, nebo tam kde je potřeba například rychle připojit nějaké senzory a sledovat je online. Každopádně věřím, že díky svým možnostem tento systém natrhne zadek i současným systémům pro ovládání &quot;inteligentních&quot; domů využívajících PLC-like systémy.</p>
<p>Budoucnost je zatím celkem jasná. Teď chci naučit systém komunikovat i v opačném směru a následně jej budu pilovat, čímž završím první etapu práce. Cest pro rozšiřování je však ještě spoustu. Jednak chci systém naučit komunikovat bezdrátově, pak také IPv6, šifrovanou komunikaci a v neposlední řadě chci vyrobit nějaké senzory a akční členy pro reálné použití a zprovoznit funkční ukázku pro prezentování celé této srandy.</p>
<p>Tak co, máte dostatek odvahy šoupnout si takový systém do baráku? Upozorňuji, že to není žádná Arduino-like stavebnice, takže to je spolehlivé... (-:</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fnadvlada-inteligentnich-procesoru%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
