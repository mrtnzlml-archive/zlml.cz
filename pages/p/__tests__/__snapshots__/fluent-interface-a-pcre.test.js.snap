// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-1056554702"
    >
      Fluent interface a PCRE
    </h1>
    <div
      className="jsx-1056554702 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Na následujících řádcích předvedu dvě věci. První je úžasný nápad jak vytvářet regulární výrazy pomocí fluent zápisu (<a href=\\"https://github.com/VerbalExpressions/PHPVerbalExpressions/blob/master/VerbalExpressions.php\\">inspirace .{target:_blank}</a>), což je druhá věc o které bych se rád zmínil.</p>
<h2 id=\\"regul-rn-v-razy-jsou-peklo\\">Regulární výrazy jsou peklo <a href=\\"#regul-rn-v-razy-jsou-peklo\\">#</a></h2><p>Ačkoliv znám pár lidí, které regulární výrazy umí, je jich opravdu pár. A nikdo z nich o sobě neřekne, že je umí. Následuje příklad velmi triviálního výrazu, který je ovšem dosti špatný, což je dobře, protože se k tomu vrátím později:</p>
<pre><code>/^(http)(s)?(\\\\:\\\\/\\\\/)(www\\\\.)?([^ ]*)(\\\\.)([^ ]*)(\\\\/)?$/
</code></pre><p>Tento výraz akceptuje přibližně tvar URL. Je však zřejmé, že je to zápis, který je nesmírně náročný na vymyšlení a extrémně náchylný ke tvoření chyb. Proto je vhodné si jeho tvorbu zjednodušit například nějakou třídou:</p>
<pre><code class=\\"lang-php\\">&lt;?php

class Regexp {

    private $regexp = &#39;&#39;;

    public function has($value) {
        $this-&gt;regexp .= &quot;(&quot; . preg_quote($value, &#39;/&#39;) . &quot;)&quot;;
        //return $this;   -   potřebné pro fluent interface
    }

    public function maybe($value) {
        $this-&gt;regexp .= &quot;(&quot; . preg_quote($value, &#39;/&#39;) . &quot;)?&quot;;
        //return $this;   -   potřebné pro fluent interface
    }

    public function anythingBut($value) {
        $this-&gt;regexp .= &quot;([^&quot; . preg_quote($value, &#39;/&#39;) . &quot;]*)&quot;;
        //return $this;   -   potřebné pro fluent interface
    }

    public function __toString() {
        return &quot;/^$this-&gt;regexp$/&quot;;
    }

}
</code></pre>
<p>S tím, že její použití je prosté:</p>
<pre><code class=\\"lang-php\\">$regexp = new Regexp();
$regexp-&gt;then(&#39;http&#39;);
$regexp-&gt;maybe(&#39;s&#39;);
$regexp-&gt;then(&#39;://&#39;);
$regexp-&gt;maybe(&#39;www.&#39;);
$regexp-&gt;anythingBut(&#39; &#39;);
$regexp-&gt;then(&#39;.&#39;);
$regexp-&gt;anythingBut(&#39; &#39;);
$regexp-&gt;maybe(&#39;/&#39;);
echo $regexp . &#39;&lt;br&gt;&#39;;
echo preg_match($regexp, &#39;http://zlml.cz/&#39;) ? &#39;P&#39; : &#39;F&#39;;
echo preg_match($regexp, &#39;https://zlml.cz/&#39;) ? &#39;P&#39; : &#39;F&#39;;
</code></pre>
<p>Nemusím však říkat, že to minimálně vypadá naprosto otřesně. Spousta psaní, až moc objektové chování. Elegantnější řešení přináší právě fluent interface.</p>
<h2 id=\\"fluent-interfaces-regul-rn-peklo-chladne\\">Fluent interfaces, regulární peklo chladne <a href=\\"#fluent-interfaces-regul-rn-peklo-chladne\\">#</a></h2><p>Fluent interface je způsob jak řetězit metody za sebe. Používá se poměrně často, ušetří spoustu zbytečného psaní a velmi prospívá srozumitelnosti kódu. Nevýhodou je, že se musí v každé metodě vrátit objekt <code>return $this;</code>, na což se nesmí zapomenout. Každopádně výsledek je skvostný:</p>
<pre><code class=\\"lang-php\\">$regexp = new Regexp();
$regexp-&gt;then(&#39;http&#39;)
        -&gt;maybe(&#39;s&#39;)
        -&gt;then(&#39;://&#39;)
        -&gt;maybe(&#39;www.&#39;)
        -&gt;anythingBut(&#39; &#39;)
        -&gt;then(&#39;.&#39;)
        -&gt;anythingBut(&#39; &#39;)
        -&gt;maybe(&#39;/&#39;);
echo $regexp . &#39;&lt;br&gt;&#39;;
echo preg_match($regexp, &#39;http://zlml.cz/&#39;) ? &#39;P&#39; : &#39;F&#39;;
echo preg_match($regexp, &#39;https://zlml.cz/&#39;) ? &#39;P&#39; : &#39;F&#39;;
</code></pre>
<p>Teprve zde vynikne to, jak je důležité správně (čti stručně a jasně) pojmenovávat metody. Díky fluent interfaces lze programovat téměř ve větách, které jsou naprosto srozumitelné.</p>
<h2 id=\\"ne-peklo-je-op-t-peklem\\">Ne, peklo je opět peklem <a href=\\"#ne-peklo-je-op-t-peklem\\">#</a></h2><p>Ačkoliv by se mohlo zdát, že díky objektu, který pomáhá tvořit regulární výrazy je jejich kompozice jednoduchou záležitostí, není tomu tak. Vrátím se k původnímu výrazu, který není dobrý. Proč? V reálném světě je kontrola, resp. předpis, který musí daná adresa mít daleko složitější. Například <code>http</code> nemusí být vůbec přítomno, pokud však je, musí následovat možná <code>s</code> a zcela určitě <code>://</code>. To samé s doménou. Ta může být jen určitý počet znaků dlouhá, může obsahovat tečky (ale ne neomezené množství), samotná TLD má také určitá pravidla (minimálně co se týče délky) a to nemluvím o parametrech za adresou, které jsou téměř bez limitu.</p>
<p>Zkuste si takový objekt napsat. Ve výsledku se i nadále budou regulární výrazy psát ručně, nebo se ve složitějších případech vůbec používat nebudou.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Ffluent-interface-a-pcre%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
