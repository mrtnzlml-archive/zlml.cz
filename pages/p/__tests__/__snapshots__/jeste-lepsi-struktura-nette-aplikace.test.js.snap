// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-1056554702"
    >
      Ještě lepší struktura Nette aplikace
    </h1>
    <div
      className="jsx-1056554702 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Každý, kdo postavil pár aplikací, musel vždy řešit ten samý problém. Jakou strukturu by měla aplikace mít? A co když se začne projekt rozrůstat? Měl bych se držet toho jak to dělá <a href=\\"https://github.com/nette/sandbox\\">sandbox</a> (resp. <a href=\\"https://github.com/nette/web-project\\">web-project</a>)? Postupem času jsem dokonvergoval k relativně přijatelnému výsledku a vzhledem k tomu, že projekt na kterém jsem to poprvé pořádně rozjel byl ukočen, <a href=\\"https://github.com/mrtnzlml/CMS-lite\\">rozhodl jsem se jej zveřejnit</a>. Už je to sice nějaký čas, ale v době největšího vrcholu tohoto projektu jsem jej považoval za takovou osobní špičku. A to hned z několika důvodů. K tomu se ale dostanu postupně. A vezmu to pěkně od těch nejmenších částí.</p>
<h2 id=\\"presentery-a-komponenty\\">Presentery a komponenty <a href=\\"#presentery-a-komponenty\\">#</a></h2><p>U presenterů se mi vlastně docela líbí jak to dělá sandbox. Ve složce presenterů jsou logicky presentery a také složka <code>templates</code>, která obsahuje šablony právě k těmto presenterům:</p>
<pre><code>presenters/
    templates/
        Homepage/
            default.latte
        @layout.latte
    BasePresenter.php
    HomepagePresenter.php
</code></pre><p>Dříve to bylo jinak. Šablony a presentery měl dříve sandbox na stejné úrovni, ale souhlasím s tím, že šablony patří spíše (a poměrně úzce) k presenterům. Je tedy nutné zmínit, že díky tomu jak je Nette framework chytrý, tak je v podstatě jedno jakou bude mít projekt strukturu, protože bude fungovat vše. Za chvíli se však začne vše nabalovat a bude třeba neustále udržovat pořádek. Proto je nutné mít jasno i v takto triviálních otázkách.</p>
<p>Komponenty se od presenterů tolik neliší. Spíše naopak. Komponenty mohou být poměrně komplikované, ale rád je dělám co nejjednodušší. U komponent používám několik návrhů. Pro velmi triviální komponenty zachovávám plochou strukturu:</p>
<pre><code>ContactForm/
    ContactForm.latte
    ContactForm.php
</code></pre><p>Je totiž otrava vytvářet spoustu zbytečných složek. To platí i pro soubory. Proto jsou generované továrničky vždy k nalezení pod třídou komponenty v jednom a tom samém souboru. Jakmile se však komponenta jen o trošku zkomplikuje, automaticky přepínám do klasického presenterového stylu:</p>
<pre><code>ContactForm/
    providers/
        IContactFormTemplateProvider.php
    templates/
        ContactForm.latte
    ContactForm.php
</code></pre><p>Dobře, základní stavební kameny jsou položeny. Co by však mělo být okolo. A kde jsou vlastně položeny? Inu pojďme na to opět postupně.</p>
<h2 id=\\"supercore-v-ci\\">Supercore věci <a href=\\"#supercore-v-ci\\">#</a></h2><p>Fakt nevím jak to nazvat jinak, protože ke core záležitostem se ještě dostanu. O co tedy jde? Jedná se o části aplikace, které tvoří to nejzákladnější jádro. Jádro, na které je pak možné napojovat další věci. Tuto část aplikace nechávám ve složce <code>app</code>:</p>
<pre><code>app/
    AdminModule/
        presenters/ &lt;-- viz první ukázka (je zde jen BasePresenter)
    AuthModule/
        presenters/ &lt;-- jen SignPresenter
    FrontModule/
        presenters/ &lt;-- viz první ukázka (Base, Contact, Homepage)
    components/
        ContactForm/ &lt;-- také už známe (viz druhá ukázka)
        AControl.php
    config/
    extensions/
    bootstrap.php
</code></pre><p>Jak je vidět, tak všechny moduly obsahují jen kritický základ. Žádné další presentery. Tak kde je zbytek? Zbytek se nechází v rootu aplikace, konkrétně ve složkách <code>custom</code> a <code>src</code>. Je celkem jedno jaký je název těchto složek, vtip je v tom nějaké mít a vše sem přesunout. Důvod proč jsou dvě je prostý. Zatímco v <code>src</code> jsou části aplikace, které tvoří jádro (tedy spoustu funkčnosti), v <code>custom</code> jsou velmi podobné částí aplikace, bez kterých lze však žít. Původní myšlenka byla taková, že se pak custom složka zruší a vše v ní se velmi elegantně rozpadne na composer balíčky. Obě složky jsou však strukturálně stejné, proto budeu řešit jen <code>custom</code>.</p>
<h2 id=\\"business-logika\\">Business logika <a href=\\"#business-logika\\">#</a></h2><p>Ok, to jsem také nazval pěkně debilně. Alespoň však vysvětlím jednu důležitou věc, se kterou jsem v začátcích bojoval a kterou je potřeba se odnaučit. Sadbox vždy totiž vedl k takovéto podobné struktuře:</p>
<pre><code>app/
    config/
    forms/
    presenters/
    model/
    router/
</code></pre><p>To nikomu nemám za zlé. Je to jednoduše pochopitelné a to je dobře. Takže s tím vlastně spíš souhlasím. Problém je v tom, že u rozrůstající aplikace už to začíná být děsný mrdník, protože <code>presenters</code> najednou obsahují všechny presentery a <code>model</code> obsahuje všechnu logiku. Ale v tom aby se prase vyznalo. Tento efekt se nechá trošku umírnit rozdělením aplikace na moduly a s tím už jsem byl (a vlastně do dneška jsem) spokojen. Jenže co s tím modelem? Fuck model! Rozdělte si model podle logických částí, které na sobě nejsou závislé a vše oddělte. Třeba takto:</p>
<pre><code>custom/
    Error/
    Eshop/
    Files/
    Notes/
    Pages/
</code></pre><p>Jak řekl kdosi moudrý, existují dva nejnáročnější problémy v programování a to správná invalidace cache a pojmenovávání věcí. Naprosot s tím souhlasím. Moc mi to nejde, ale mělo by být zřejmé, že jsou zde části, které se starají (výhradně) o eshop, o poznámky, stránky atd. Pojďme se tedy zanořit hlouběji:</p>
<pre><code>Pages/
    AdminModule/
        presenters/
            CategoryPresenter.php
            PagePresenter.php
    components/
        PageForm/
        PagesGrid/
    DI/
    FrontModule/
    listeners/
    Category.php
    Page.php
    ...
</code></pre><p>A voilà, máme tu zase strukturu složky <code>app</code>. Nebo alespoň její obdobu. A v tom je síla toho návrhu. Mělo by už teď být jasnější, proč jsou v <code>app</code> právě ty věci co tam jsou. Celém vždy bylo mít v systému místa, které obsahují velmi podobné věci, ale nic dalšího. Drobné niance se zde najdou, to je jasné, ale základ zůstává. Jenže jak to sakra funguje?</p>
<h2 id=\\"jak-to-sakra-funguje\\">Jak to sakra funguje <a href=\\"#jak-to-sakra-funguje\\">#</a></h2><p>Právě teď je ten správný čas <a href=\\"https://github.com/mrtnzlml/CMS-lite\\">proklikat si celý systém</a>. Je zřejmé, že už je to trošku komplikovanější a samo od sebe to fungovat nemůže (ani to není žádoucí). Zkušenější už tuší, že celé kouzlo je ve složce <code>DI</code>. Zde je tedy mé další doporučení. Až rozsekáte aplikaci do komponent, udělejte to samé s funkcionalitou. A víte co, udělejte to se vším co spolu nějak logicky souvisí. Proto jsem do složky <code>custom/Pages</code> umístil vše co patří ke stránkám. Komponenty, doctrine entity, servisní třídy, fasády, ale také presentery. Prostě všechno. Dělejte to tak dlouho, dokud v <code>app</code> nezůstane nic.</p>
<p>Tento způsob však s sebou nese celou řadu úskalí. Prvně je to komplikované. A pak je třeba vše napojit. Existují dva způsoby, které mi přijou v pořádku. První je poněkud agresivní, ale jednoduchý. Vychází vlastně z myšlenky <a href=\\"http://flame-org.github.io/Modules/\\">Flame\\\\Modules</a>. Napíšete si nějaké rozšíření, které bude implementovat nějaký interface. Třeba <code>IFaviconProvider</code>. Pak je třeba mít (právě v supercore) rozšíření, které takový interface najde a při vytváření DIC zpracuje. Hodně toho využívají šablony (<code>custom/Versatile/DI/VersatileExtension.php</code>). Nebezpečí je však v tom, že se to prostě stane jakmile přidáte toto rozšíření do aplikace. Není zde moc rozumná možnost jak třeba rozšíření deaktivovat. A ještě komplikovanější je pak při vytváření DIC přeba automaticky spustit nějaký SQL dotaz.</p>
<p>Proto je zde druhý způsob (který jsem pořádně nestihl dodělat). Využívá jej například <code>\\\\Eshop\\\\DI\\\\EshopExtension</code>. To implementuje <code>ICustomExtension</code>. Jiné (supercore) rozšíření se toho chytí a udělá pouze to, že jej zobrazí v administraci včetně potřebných odadtečných informací. Stejně tak jako to dělá WordPress. Uživatel zde může kliknutím modul nainstalovat, což se přesně u eshopu děje a spustí se tak celá řada komplikovaných operací, které tento modul nainstalují. Jedná se zejména o předání URL adres, nastavení ACL, zaregistrování položek do menu atd. Elegantně se tak celý systém připraví a díky tomu, že dojde k registraci do DIC, není důvod k tomu, aby se s narůstajícím počtem modulů systém nějak dusil. Prostě se chová jako jakákoliv jiná velká aplikace. Nic není hledáno a řešeno dynamicky za běhu aplikace. Druhý krok je už pak dodělat instalace modulů ze vzdáleného repozitáře, ale to už je jednoduchý úkol.</p>
<p>A je to. Elegantní instalační systém pluginů pro vaší Nette aplikaci.</p>
<h2 id=\\"dal-zaj-mav-vlastnosti-syst-mu\\">Další zajímavé vlastnosti systému <a href=\\"#dal-zaj-mav-vlastnosti-syst-mu\\">#</a></h2><p>Takže to máme peckovou strukturu aplikace, kterou je velmi jednoduché udržovat a rozšířovat + automatickou registraci modulů (pluginů chcete-li). A to jsem teprve na začátku. Proto už jen bodově vypíchnu a připomenu některé zajímavé věci, které všem dávám k dispozici.</p>
<ol>
<li>Každé rozšíření je v Nette nutné registrovat do konfiguračního souboru. To by s tím ale nešlo nělat takové švíky. Proto jsem napsal <code>\\\\App\\\\Extensions\\\\CoreExtension</code>, které to dělá automaticky. Není to zrovna ukázka čistého kódu, ale svůj účel to plní dobře. Už touto vlastností jste několik mil před konkurencí... (-:</li>
<li>Vzpomínáte si na <a href=\\"hierarchicky-router\\">Hierarchický router</a>? Tak i ten je zde v celé své kráse. Jen pro připomenutí. Je možné měnit si URL adresy jak chcete, nikdy nepřijdete o ty staré a výkonově to nestojí nic navíc.</li>
<li><a href=\\"dynamicke-routovani-url-adres\\">Dynamické routování URL adres</a>. To je další fičura, kterou jen tak někdo nemá. Nebo snad ano? Použijte ji. Vybudujte něco úžasného.</li>
<li>A co takhle Fixtures. <a href=\\"fixnete-si-databazi\\">Vzpomínáte si</a>?</li>
<li>Všimněte si, že hodně rozšíření obsahuje jakési providery. Je tak možné jednoduše třeba zaměnit šablonu kontaktního formuláře, nebo navigace. Obdobně mohou rozšíření registrovat vlastní styly i javascriptové skripty.</li>
<li>K dispozici jsou Doctrine migrace. K dispozici jsou v nabídce přes <code>php index.php</code>. Samotné migrační skripty jsou pak v <code>migrations</code> složce.</li>
</ol>
<p>Je toho fakt ranec, co pouštím na obdiv i kritiku. Proto ještě stručněji přehled technologií, které v projektu naleznete:</p>
<ul>
<li>grunt + grunt-contrib packages (concat, copy, cssmin, less, uglify)</li>
<li>bootstrap, nette.ajax.js, nette-forms, jquery, selectize</li>
<li>nette (application, caching, DI, finder, forms, robot-loader, security, utils, ...)</li>
<li>latte, tracy, texy, webloader, minify, faker, secured-links</li>
<li>kdyby (doctrine, annotations, console, events, translation, autowired, monolog, ...)</li>
<li>doctrine (data-fixtures, migrations, ORM, ...)</li>
<li>testbench, nette\\\\tester</li>
</ul>
<p>A to jsem zde ještě nenapsal vše. Mrkněte se na náhled, nejedná se jen o nějaký marný pokus:</p>
<p><img src=\\"https://zlmlcz-media.s3-eu-west-1.amazonaws.com/9b3c176d-4884-45c5-95c3-53cac2999d0f/admin.png\\" alt=\\"\\"></p>
<h2 id=\\"instalace-syst-mu\\">Instalace systému <a href=\\"#instalace-syst-mu\\">#</a></h2><p>Bohužel jsem nevychytal všechny mouchy, půlka věcí zůstala nerozdělána a celý materiál je spíše pro inspiraci. Pokud by si to však někdo chtěl rozjet, dávám k dispozici také poněkud složitější návod na instalaci (viz readme):</p>
<ul>
<li>Nainstalujte si <a href=\\"http://git-scm.com/\\">GIT</a></li>
<li><code>git clone https://github.com/mrtnzlml/CMS-lite.git</code></li>
<li>Nainstalujte si <a href=\\"http://getcomposer.org/\\">Composer</a></li>
<li><code>composer install</code> (natáhne PHP závislosti)</li>
<li>Vytvořte si prázdnou MySQL databázi</li>
<li>Přejmenujte <code>config.local.neon.dist</code> (v app/config) na <code>config.local.neon</code> a nastavte přístupové údaje k databázi</li>
<li><code>php index.php orm:schema-tool:create</code> (vygeneruje strukturu databáze)</li>
<li><code>php index.php cms:fixtures:load</code> (našte základní data, teď už by měla aplikace fungovat)</li>
<li>Nainstalujte si <a href=\\"http://bower.io/\\">Bower</a>, popř. <a href=\\"https://www.npmjs.com/\\">npm</a> je-li třeba</li>
<li><code>bower install</code> (fetches JS dependencies)</li>
<li>Nainstalujte si <a href=\\"http://gruntjs.com/\\">Grunt</a></li>
<li><code>grunt</code> (připraví JS, CSS, fonts, ...)</li>
</ul>
<p>Každý příkaz by měl být spouštěn z rootu webu. Výjimku tvoří příkazy obsahující <code>index.php</code>. Ty je třeba spouštět ze složky <code>www</code>. To dá asi rozum.</p>
<p>A na závěr. Jsem realista. Nepředpokládám, že by se projektu někdo doprovolně chytil a nakopl mě, aby v něm pokračoval aktivněji. Zatím jej spíš nikdo nepochopil a musel jsem si protrpět i pár klacků pod nohama. Proto jej dávám k dispozici jako inspiraci pro ostatní. Nemám strach, že by si to někdo přivlastnil, nebo na tom zbohatl. To si spousta firem (lidí) neuvědomuje a tak nikdo raději nezveřejňuje nic. Zveřejňujte, předávejte znalosti - nepřijdete o ně. Nicméně v rámci gentlemanské dohody bych rád vyměnil své předané znalosti za hvězdičku u tohoto nového repozitáře. Nic víc nežádám.</p>
<iframe src=\\"https://ghbtns.com/github-btn.html?user=mrtnzlml&repo=CMS-lite&type=star&count=true&size=large\\" frameborder=\\"0\\" scrolling=\\"0\\" width=\\"160px\\" height=\\"30px\\"></iframe>

<p>Pokorně děkuji.</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fjeste-lepsi-struktura-nette-aplikace%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
