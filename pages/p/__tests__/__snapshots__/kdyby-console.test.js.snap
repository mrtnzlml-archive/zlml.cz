// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-1056554702"
    >
      Kdyby\\Console
    </h1>
    <div
      className="jsx-1056554702 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Existují knihovny, bez kterých bych si vývoj webových aplikací již téměř nedokázal představit. Jedním z nich je <a href=\\"https://github.com/kdyby/console\\">Kdyby\\\\Console</a>. Již dříve jsem sice napsal článek o <a href=\\"nette-2-1-dev-clirouter\\">Nette CliRouteru</a>, ale postupem času a hlavně také díky Doctrine jsem velmi rychle a rád přešel na jiné a dokonalejší řešení. Vzhledem k tomu, že na jednom projektu používám tuto knihovnu velmi hodně a vlastně na ní celý projekt stojí, rád bych alespoň prostřednictvím tohoto článku autorovi poděkoval (<a href=\\"https://github.com/fprochazka\\">Filip Procházka</a>). Zároveň bych tímto počínáním rád postupně smazával věčný problém těchto knihoven, protože většinou z hlediska návštěvníka ani není jasné, na co ta knihovna je...</p>
<h2 id=\\"pro-uva-ovat-o-konzoli-\\">Proč uvažovat o konzoli? <a href=\\"#pro-uva-ovat-o-konzoli-\\">#</a></h2><p>Pro mě je tato otázka celkem jednoduchá, protože mám projekty, které nejedou jen na sdíleném hostingu, ale jsou to samostatně stojící aplikace. Z toho plyne, že je často zapotřebí vykonávat pomocí CRONu velké množství úkolů. Toto je hlavní část, proč vůbec o konzolovém nástroji uvažuju. Použití je totiž velmi jednoduché a právě samotná Doctrine nabízí prostřednictvím Kdyby\\\\Console celou řadu klasických příkazů a je škoda je nevyužívat. Stačí spustit z příkazové řádky <code>php index.php</code> u aplikace a pokud jsou příkazy zaregistrovány v konfigu, vypíše se jejich seznam včetně nápověd:</p>
<pre><code>C:\\\\xampp\\\\htdocs\\\\zeminem.cz\\\\www&gt;php index.php
Nette Framework version 2.2.3-RC2

Usage:
  [options] command [arguments]

Options:
  --help           -h Display this help message.
  --quiet          -q Do not output any message.
  --verbose        -v|vv|vvv Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
  --version        -V Display this application version.
  --ansi              Force ANSI output.
  --no-ansi           Disable ANSI output.
  --no-interaction -n Do not ask any interactive question.

Available commands:
  help                       Displays help for a command
  list                       Lists commands
blog
  blog:install               Install database schema (set-up DB credentials in config.local.neon).
  blog:update                Update database schema (set-up DB credentials in config.local.neon).
dbal
  dbal:import                Import SQL file(s) directly to Database.
orm
  orm:clear-cache:metadata   Clear all metadata cache of the various cache drivers.
  orm:clear-cache:query      Clear all query cache of the various cache drivers.
  orm:clear-cache:result     Clear all result cache of the various cache drivers.
  orm:convert-mapping        Convert mapping information between supported formats.
  orm:convert:mapping        Convert mapping information between supported formats.
  orm:generate-entities      Generate entity classes and method stubs from your mapping information.
  orm:generate-proxies       Generates proxy classes for entity classes.
  orm:generate:entities      Generate entity classes and method stubs from your mapping information.
  orm:generate:proxies       Generates proxy classes for entity classes.
  orm:info                   Show basic information about all mapped entities
  orm:schema-tool:create     Processes the schema and either create it directly on EntityManager Storage Connection or generate the SQL output.
  orm:schema-tool:drop       Drop the complete database schema of EntityManager Storage Connection or generate the corresponding SQL output.
  orm:schema-tool:update     Executes (or dumps) the SQL needed to update the database schema to match the current mapping metadata.
  orm:validate-schema        Validate the mapping files.
</code></pre><p>Díky této možnosti je možné rychle validovat Doctrine entity, nebo generovat SQL schéma přímo do databáze. Použití je opět jednoduché, např.: <code>php index.php orm:info</code>.</p>
<h2 id=\\"tvorba-vlastn-ho-p-kazu\\">Tvorba vlastního příkazu <a href=\\"#tvorba-vlastn-ho-p-kazu\\">#</a></h2><p>Prvně je třeba si uvědomit, že tato knihovna je vlastně to samé jako je v <a href=\\"http://symfony.com/doc/current/components/console/introduction.html\\">Symfony Console Component</a>, tzn. že potřebné informace se dají čerpat právě z této dokumentace a navíc existuje celá sada helperů, jako je například <a href=\\"http://symfony.com/doc/current/components/console/helpers/progressbar.html\\">Progress Bar</a>, nebo třeba šikovný <a href=\\"http://symfony.com/doc/current/components/console/helpers/table.html\\">Table</a>. Samotné napsání třídy (Commandu) je pak triviální záležitostí:</p>
<pre><code class=\\"lang-php\\">&lt;?php

namespace App\\\\Console;

use Doctrine;
use Entity;
use Symfony\\\\Component\\\\Console\\\\Command\\\\Command;
use Symfony\\\\Component\\\\Console\\\\Input\\\\InputInterface;
use Symfony\\\\Component\\\\Console\\\\Output\\\\OutputInterface;

class BlogInstall extends Command {

    /** @var \\\\Kdyby\\\\Doctrine\\\\EntityManager @inject */
    public $em;

    protected function configure() {
        $this-&gt;setName(&#39;blog:install&#39;)-&gt;setDescription(&#39;Install database schema (set-up DB credentials in config.local.neon).&#39;);
    }

    protected function execute(InputInterface $input, OutputInterface $output) {
        try {
            // Zde vykonáme vše co je potřeba
            // Zde vykonáme vše co je potřeba
            // Zde vykonáme vše co je potřeba
            //...
            $output-&gt;writeLn(&#39;&lt;info&gt;[OK] - BLOG:INSTALL&lt;/info&gt;&#39;);
            return 0; // zero return code means everything is ok
        } catch (\\\\Exception $exc) {
            $output-&gt;writeLn(&#39;&lt;error&gt;BLOG:INSTALL - &#39; . $exc-&gt;getMessage() . &#39;&lt;/error&gt;&#39;);
            return 1; // non-zero return code means error
        }
    }

}
</code></pre>
<p>Za povšimnutí stojí fakt, že tyto třídy jsou vedle presenterů dalším kandidátem na použití <code>@inject</code> anotace. V tomto příbadě bude tedy k dispozici příkaz <code>blog:install</code>, který je však nutné ještě zaregistrovat v konfiguračním souboru:</p>
<pre><code class=\\"lang-neon\\">services:
    -
        class: App\\\\Console\\\\BlogInstall
        tags: [kdyby.console.command]
</code></pre>
<p>Tento způsob registrace je jedna z věcí, která mě štve a rád bych, kdyby se toto Console naučila hackovat sama a já nemusel tagovat, že se jedná o command. Když je totiž těchto příkazů hodně, konfigurační soubor tímto způsobem poměrně rychle roste na své délce a stává se nepřehledným... (-:</p>
<h2 id=\\"a-co-je-na-tom-\\">A co je na tom? <a href=\\"#a-co-je-na-tom-\\">#</a></h2><p>Vždyť toto umí Symfony. To Kdyby nic jiného neumí? No, tak krom toho, že vůbec řeší integraci do Nette, což je asi hlavní úkol, tak jsou logicky součásti integrace i další části jako jsou například vlastní helpery. Není totiž nic horšího, než když v takovém commandu potřebujete presenter. Ale ono je to vlastně jednoduché:</p>
<pre><code class=\\"lang-php\\">$presenter = $this-&gt;getHelper(&#39;presenter&#39;)-&gt;getPresenter();
</code></pre>
<p>A stejný problém je pak s odkazy. Jak totiž v CLI pracovat s URL, když žádná není? I to Console řeší. Stačí v configu uvést:</p>
<pre><code class=\\"lang-neon\\">console:
    url: http://zlml.cz/
</code></pre>
<p>Pak je tvorba odkazů v CLI úplná pohodička:</p>
<pre><code class=\\"lang-php\\">$link = $presenter-&gt;link(&#39;//:Front:Homepage:default&#39;);
</code></pre>
<p>Podívejte se na <a href=\\"https://github.com/mrtnzlml/zlml.cz/tree/6d1ad3de5b1f98067a38d2085e4939cd17cf5db5/app/commands\\">reálné ukázky</a> příkazů pro Kdyby\\\\Console. Za sebe mohu tento nástroj jedině doporučit. Pokud potřebujete se svojí aplikací pracovat z příkazové řádky. Toto je jiná správná cesta. Díky! (-:</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fkdyby-console%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
