// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-1056554702"
    >
      Hierarchický router
    </h1>
    <div
      className="jsx-1056554702 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Tento článek volně navazuje na <a href=\\"dynamicke-routovani-url-adres\\">předchozí</a>. Zde jsem ukázal, jak vytvořit routy tak, aby bylo možné mít zcela libovolnou adresu a routovat ji na jakoukoliv akci v aplikaci. Dnes to trošku vylepšíme. Přidáme totiž další dva požadavky s tím, že první je ten důležitější:</p>
<ol>
<li>Když se změní adresa (například článku), musí se stará přesměrovat na novou. To se může dít opakovaně a nechceme mít mnohonásobný redirect. Redirect může být maximálně jeden a to pro jakoukoliv starou (i původní) adresu.</li>
<li>Bude možné vytvořit jakoukoliv adresu, která bude přesměrovávat na jakoukoliv jinou.</li>
</ol>
<p>Druhý požadavek je vlastně jen speciální (zjednodušený) případ toho prvního. Co to znamená? Podívejte se na následující ASCII art. Obsahuje pět obrázků znázorňujících postupné změny přesměrování při přidávání dalších přesměrování. Nebudeme již řešit routování na akce v presenterech, ale práci se samotným URL a jak se bude chovat, když se přesměruje aktuální cílové URL jinam.</p>
<pre><code>URL-1


URL-1 ----&gt; URL-2


URL-1 -------.
             v
URL-2 ----&gt; URL-3


URL-1 -------.
             v
URL-2 ----&gt; URL-4 &lt;---- URL-3


URL-1 -------.
             v
URL-2 ----&gt; URL-5 &lt;---- URL-3
             ^
             &#39;----------URL-4
</code></pre><p>Slovy řečeno, nesmí se <strong>nikdy</strong> stát, aby byla cesta od staré adresy k nové delší, než je jeden skok. Je zřejmé, že původně byla pouze URL-1. Ta byla přesměrována na URL-2. V okamžik, kdy se přesměruje URL-2 na URL-3, původní propojení mezi URL-1 a URL-2 se musí úplně zrušit a naměrovat URL-1 až na URL-3. A tak to pokračuje dále. Z toho je zřejmé, že nazývat tento router hierarchickým je poněkud zavádějící, protože ve skutečnosti se udržuje takový obrácený les. S troškou režie na začátku je to však vhodnější, protože se tím hezky mění průběžně struktura redirectů a je to lepší, než například takto, to je asi všem jasné:</p>
<pre><code>URL-1
 &#39;--&gt; URL-2
       &#39;--&gt; URL-3
             &#39;--&gt; URL-4
                   &#39;--&gt; URL-5
</code></pre><h2 id=\\"p-epo-et-odkaz-\\">Přepočet odkazů <a href=\\"#p-epo-et-odkaz-\\">#</a></h2><p>V tom to vlastně celé vězí. Je nutné při vytváření redirectu najít všechny staré odkazy a změnit je na nové. Vrátíme se však k předchozímu článku a trošku vylepšíme cache. Tedy cache zůstane stejná, ale vylepšíme její invalidaci následovně:</p>
<pre><code class=\\"lang-php\\">$destination = $this-&gt;cache-&gt;load($path, function (&amp; $dependencies) use ($path) {
    $destination = $this-&gt;em-&gt;getRepository(Url::class)-&gt;findOneBy([&#39;fakePath&#39; =&gt; $path]);
    if ($destination === NULL) {
        $this-&gt;monolog-&gt;addError(sprintf(&#39;Cannot find route for path %s&#39;, $path));
        return NULL;
    }
    $dependencies = [Nette\\\\Caching\\\\Cache::TAGS =&gt; [&#39;route/&#39; . $destination-&gt;getId()]];
    return $destination;
});
</code></pre>
<p>Přidáme ke každému uložení cache tzv. tag, díky čemuž bude možné později tuto cache snadno najít a zrušit její platnost. V closure je nutné dělat to takto přes dependencies proměnnou. Jsou samozřejmě i jiné možnosti <a href=\\"http://doc.nette.org/cs/2.3/caching#toc-expirace-a-invalidace\\">jak cache zneplatnit</a>, ale tento způsob považuji za dostatečný. Hodí se to proto, že až budeme upravovat staré odkazy, tak je (a pouze je) smažeme z cache, čímž zapříčiníme jejich opětovné vytvoření, tentokrát však s jiným přesměrováním.</p>
<p>Do entity URL adresy je třeba přidat další vlastnost - odkaz na sebe.</p>
<pre><code class=\\"lang-php\\">/**
 * @ORM\\\\ManyToOne(targetEntity=&quot;Url&quot;, cascade={&quot;persist&quot;})
 * @ORM\\\\JoinColumn(referencedColumnName=&quot;id&quot;, onDelete=&quot;SET NULL&quot;)
 * @var Url
 */
protected $redirectTo = NULL;
</code></pre>
<p>Tento odkaz využijeme v routeru, který v případě existence tohoto odkazu bude pracovat právě s ním. V opačném případě router pracuje normálně viz předchozí článek. To už tu nebudu řešit. Spíše se podíváme na samotnou tvorbu redirectů. Tu mám umístěnou v <code>@RedirectFacade::createRedirect</code>. Tato metoda přijímá dvě čísla (ID) a to odkud se přesměrovává a kam se přesměrovává. Bohužel není možné předat si parciální entitu, protože není možné ji naplnit a odeslat do databáze (vlastnost Doctrine). No a předávat celé entity je zbytečné. Proto jen ID. Zjednodušeně vypadá tato metoda takto:</p>
<pre><code class=\\"lang-php\\">public function createRedirect($from, $to)
{
    $this-&gt;em-&gt;transactional(function () use ($from, $to) {
        /** @var Url $oldLink */
        foreach ($this-&gt;em-&gt;getRepository(Url::class)-&gt;findBy([
            &#39;redirectTo&#39; =&gt; $from
        ]) as $oldLink) {
            $oldLink-&gt;setRedirectTo($this-&gt;em-&gt;getPartialReference(Url::class, $to));
            $this-&gt;cache-&gt;clean([Nette\\\\Caching\\\\Cache::TAGS =&gt; [&#39;route/&#39; . $oldLink-&gt;getId()]]);
        }

        /** @var Url $from */
        $from = $this-&gt;em-&gt;find(Url::class, $from);
        $from-&gt;setRedirectTo($this-&gt;em-&gt;getPartialReference(Url::class, $to));
        $this-&gt;em-&gt;flush();
        $this-&gt;cache-&gt;clean([Nette\\\\Caching\\\\Cache::TAGS =&gt; [&#39;route/&#39; . $from-&gt;getId()]]);
    });
}
</code></pre>
<p>Dalo by se to optimalizovat z hlediska databázových dotazů lépe, ale jednak to není (zatím nebylo) potřeba a pak se hodí tahat si jednotlivé záznamy postupně právě kvůli invalidace cache. Jak to funguje? V první části si vytáhnu všechny odkazy, které ukazují na odkaz ze kterého budu přesměrovávat. To jsou ty staré, které je třeba zrušit. Ty jsou nahrazeny odkazy na nové stránky a jejich cache je samozřejmě smazána. To je ta důležitější část. V druhé polovině dojde jen k uložení nového přesměrování a opět smazání cache pro tento odkaz. Za povšimnutí stojí funkce <code>getPartialReference</code> o které jsem psal už minule. Je to funkce, která nevrací celou entitu, ale pouze nenaplněnou entitu s ID (parciální). Nic víc totiž dost často není potřeba...</p>
<h2 id=\\"druh-st-e-en-\\">Druhá část řešení <a href=\\"#druh-st-e-en-\\">#</a></h2><p>Druhá část řešení je již jednoduchá.</p>
<blockquote>
<p>Bude možné vytvořit jakoukoliv adresu, která bude přesměrovávat na jakoukoliv jinou.</p>
</blockquote>
<p>Stačí entitě povolit, aby mohlo být NULL <code>destination</code> (tedy interní odkaz na presenter a akci) a <code>internalId</code>. To jsou totiž informace, které nejsou známé a pro tetno účel jsou i zbytečné. Důležitá je totiž jen cesta a odkaz na cílovou URL. A to je vlastně vše, protože vše ostatní už přirozeně umí dříve napsaný router.</p>
<p>Ještě jsem nedávno narazil na zajímavý router, který umožňoval smazat jakoukoliv část cesty a on si jí domyslel a přesměroval. Nekoukal jsem úplně do střev, ale asi tak, že vyhledá přesně znění cesty a když ji nemůže najít, tak položí nějaký LIKE% dotaz ve snaze alespoň ji odhadnout. To už ale považuji za zbytečné a nevyužitelné. Osobně se mi ještě více líbí routy, které jsou na ČSFD. Obsahují totiž přirozený zkracovač adres viz tyto dvě adresy, které jsou stejné:</p>
<pre><code>http://www.csfd.cz/film/5911
http://www.csfd.cz/film/5911-tenkrat-na-zapade/
</code></pre><p>Vyzkoušejte <a href=\\"http://www.csfd.cz/film/5911\\">si</a> <a href=\\"http://www.csfd.cz/film/5911-tenkrat-na-zapade/\\">to</a>. První přesměruje na druhou. Bohužel ne všem se čísla v adresách líbí (i když podle mého názoru bezdpůvodně).</p>
<p>Ačkoliv budu na routeru dále pracovat, tak k němu zatím nemám v plánu další komentáře. Pokud tedy něco není jasné, teď je ta správná chvíle zeptat se. Jo mimochodem. Předchozí router už není obyčejnou implementací <code>\\\\Nette\\\\Application\\\\IRouter</code>, ale dědí od <code>\\\\Nette\\\\Application\\\\Routers\\\\RouteList</code>. Je to z toho důvodu, že se bez toho Kdyby\\\\Console <a href=\\"https://github.com/Kdyby/Console/blob/master/src/Kdyby/Console/CliRouter.php#L124\\">nerozjede</a>. Pokud bych tedy nepoužíval tuto knihovnu, tak by to nebyl problém. Samotná quick&#39;n&#39;dirty úprava spočívá v přidání tohoto kódu na začátek match metody:</p>
<pre><code class=\\"lang-php\\">/** @var Application\\\\IRouter $route */
foreach ($this as $route) {
    /** @var Application\\\\Request $applicationRequest */
    $applicationRequest = $route-&gt;match($httpRequest);
    if ($applicationRequest !== NULL) {
        return $applicationRequest;
    }
}
</code></pre>
<p>A to je vše...</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fhierarchicky-router%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
