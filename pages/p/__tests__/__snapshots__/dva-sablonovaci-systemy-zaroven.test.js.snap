// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-1056554702"
    >
      Dva šablonovací systémy zároveň
    </h1>
    <div
      className="jsx-1056554702 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Možná pracujete na nějakém projektu, který používá jiný šablonovací systém než je Latte, ale Latte se vám natolik líbí, že ho chcete používat také. Nebo naopak používáte Latte, ale <em><abbr title=\\"Smarty? Twig? Wtf? Omg?\\">[doplň název šablonovacího systému]</abbr></em> se vám natolik líbí, že ho chcete používat také. A nebo prostě nemáte na výběr a musíte používat více šablonovacích systémů. V takovém případě existuje asi jediné přímočaré řešení a tím je vlastní implementace <code>Nette\\\\Application\\\\UI\\\\ITemplate</code>.</p>
<h2 id=\\"templatefactory\\">TemplateFactory <a href=\\"#templatefactory\\">#</a></h2><p>Ono to vlastně zase až tak přímočaré není. Je v tom totiž malý háček. V současné době fungují Latte šablony tak, že existuje továrna <code>TemplateFactory</code>, jejíž úkolem je vytvářet <code>Template</code> objekty. Originální implementace, kterou používá většina lidí (<code>Nette\\\\Bridges\\\\ApplicationLatte\\\\Template</code>) pouze deleguje renderování přímo na Latte. Nabízelo by se tedy nahradit tento objekt svým vlastním a delegovat renderování jednak na Latte a jednak třeba na Smarty. Háček je však v tom, že <code>Template</code> není služba zaregistrovaná v DIC, takže není jednoduché ji nahradit.</p>
<p>Proto aby bylo možné nahradit objekt <code>Template</code> vlastním, je nutné nahradit také <code>TemplateFactory</code>. Tento objekt vytváří nové instance třídy <code>Template</code> a tyto objekty dále nastavuje (přidává filtry, makra, proměnné, providery, prostě Nette specific věci). Nešvar s nahrazováním celé továrničky se už pár lidí <a href=\\"https://github.com/nette/application/issues/141\\">snažilo vyřešit</a>, ale nikdy to nikdo nedotáhl do konce (včetně mě). Jak to tedy udělat teď?</p>
<p>V první řadě je třeba vytvořit si vlastní <code>TemplateFactory</code>:</p>
<pre><code class=\\"lang-php\\">&lt;?php

class TemplateFactory implements Nette\\\\Application\\\\UI\\\\ITemplateFactory
{
    //...
}
</code></pre>
<p>To v podstatě znamená copy paste původní továrny. Je to trošku nepříjemné, ale je možné z toho těžit. Můžeme se například zbavit deprecated věcí, nebo si libovolně nakonfigurovat <code>Template</code> objekt. Podstatné je, že v <code>createTemplate</code> metodě vytváříme vlastní instanci <code>Template</code> objektu.</p>
<p>Teď přijde ta důležitá část na kterou nesmíme zapomenout. Novou vlastní <code>TemplateFactory</code> zaregistrujeme do konfiguračního souboru jako službu:</p>
<pre><code class=\\"lang-php\\">services:
    latte.templateFactory: Ant\\\\TemplateFactory
</code></pre>
<p>Tento zápis zajistí to, že se nejen <code>TemplateFactory</code> přidá do DI kontejneru, ale zároveň se nahradí původní implementace (proto to <code>latte.templateFactory</code> - důležité).</p>
<h2 id=\\"template\\">Template <a href=\\"#template\\">#</a></h2><p>Samotný <code>Template</code> objekt už je pak prkotina. Stačí pouze změnit implementaci metody <code>render</code>. Já osobně jsem to řešil tak, že podle toho jaká přijde koncovka souboru, tak nabídnu ten správný engine pro vykreslení. Třeba nějak takto:</p>
<pre><code class=\\"lang-php\\">public function render($file = NULL, array $params = [])
{
    $file = $file ?: $this-&gt;getFile();

    if (Strings::endsWith($file, &#39;.latte&#39;) || $this-&gt;getLatte()-&gt;getLoader() instanceof \\\\Latte\\\\Loaders\\\\StringLoader) {
        //tady mám něco hustého co ukážu jindy

        $this-&gt;getLatte()-&gt;render($file, $params + $this-&gt;getParameters());
       } else { //Smarty fallback
           //peklo které nechce nikdy vidět

        $providers = $this-&gt;getLatte()-&gt;getProviders();
        /** @var \\\\Nette\\\\Application\\\\UI\\\\Presenter $presenter */
        $presenter = $providers[&#39;uiPresenter&#39;];
        if ($presenter-&gt;isAjax()) {
            $this-&gt;page-&gt;fetch($file);
        } else {
            $this-&gt;page-&gt;display($file);
        }
       }
}
</code></pre>
<p>Trošku jsem to zjednodušil aby byla podtržena myšlenka. Doporučím však ještě jednu věc a to podědit si vlastní template od <code>Nette\\\\Bridges\\\\ApplicationLatte\\\\Template</code>. Chce to trošku si s tím pohrát, ale hlavní benefit bude vidět za chvíli. Zejména je dobré zaměřit se na <code>__set</code>:</p>
<pre><code class=\\"lang-php\\">public function __set($name, $value)
{
    $this-&gt;assignToSmarty($name, $value); //DIY
    parent::__set($name, $value);
}
</code></pre>
<p>Teď je totiž možné používat klasické <code>$this-&gt;template-&gt;variable = &#39;xyz&#39;;</code> a tato proměnná bude k dispozici bez ohledu na způsob vykreslení.</p>
<h2 id=\\"gotchas-a-benefity\\">Gotchas a benefity <a href=\\"#gotchas-a-benefity\\">#</a></h2><p>Každý teď tedy může používat například v komponentách <code>$this-&gt;template-&gt;render(&#39;***.tpl&#39;);</code> a zároveň mít třeba layout v Latte. Je to fuk. A to je cool. Je však třeba mít neustále na mysli, že nelze jednotlivé vykreslovací způsoby používat úplně nahodile. Styčiný bod je render metoda. Nelze tedy například používat include v Latte a vyžadovat tam šablonu ze Smarty.</p>
<p>Asi největší nachytávka jsou snippety. Na to jak udělat podporu snippetů do Smarty se můžeme podívat jindy - není to nic složitého. Problém byl však u kombinování jednotlivých způsobů vykreslení a předávání <code>snippetMode</code> příznaku. <code>snippetMode</code> vlastně říká, jestli se má šablona vykreslit jako snippet (tedy jen podčásti) a vrátit v payloadu. Když jsem však použil komponentu ve Smarty (vlastní <code>{control name=test}</code>) a v této komponentě normální Latte šablonu obsahující snippety, tak to prostě nemohlo fungovat. Asi nejjednoušší řešení bylo v tomto případě trošku ohnout <code>Template</code> a <code>snippetMode</code> prostě přes tu aplikaci protlačit:</p>
<pre><code class=\\"lang-php\\">$presenter = $this-&gt;getLatte()-&gt;getProviders()[&#39;uiPresenter&#39;];
if ($presenter-&gt;isAjax()) {
    //propagate snippet mode into components (Smarty templates):
    foreach ($presenter-&gt;getComponents(TRUE) as $component) {
        $component-&gt;snippetMode = $presenter-&gt;snippetMode;
    }
    $this-&gt;page-&gt;fetch($file);
} else {
    $this-&gt;page-&gt;display($file);
}
</code></pre>
<p>Není to úplně stejné jako se chová Nette k Latte, ale účel to plní dobře a to jde... :)</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2Fdva-sablonovaci-systemy-zaroven%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
