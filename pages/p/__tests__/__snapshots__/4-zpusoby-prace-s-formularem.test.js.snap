// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<div>
  <div
    className="jsx-1307704868 wrapper"
  >
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      ¡Hola! My name is
    </p>
    <h1
      className="jsx-2345896288"
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/"
          onClick={[Function]}
        >
          Martin Zlámal
        </a>
      </span>
    </h1>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
    <h1
      className="jsx-1056554702"
    >
      4 způsoby práce s formulářem v šabloně
    </h1>
    <div
      className="jsx-1056554702 article"
      dangerouslySetInnerHTML={
        Object {
          "__html": "<p>Velká část článků na tomto blogu jsou reakcí na nějaký reálný problém. Nehledě na to, kde jsem (třeba na včerejším <a href=\\"http://blog.id-sign.com/react-workshop/\\">React workshopu</a>), tak odpovídám na dotazy ohledně Nette. Je to v pořádku, rád pomůžu. Jsou však dotazy, které se neustále opakují. Toto je jeden z nich:</p>
<blockquote>
<p>Formuláře v Nette jsou strašný voser. Jak to dělat lépe?</p>
</blockquote>
<p>Většinou takto vágně to vždy začíná. Následuje stejné kolečko - vysvětlím proč se to tak dělá, popíšu jiný přístup k formulářům, tazatel je spokojen, podívám se do dokumentace, že to tam opravdu je a čekám na další stejný dotaz. Proto si teď dovolím vyzdvihnout nad rámec dokumentace několik základních způsobů, jak s formuláři v Nette pracovat.</p>
<h2 id=\\"prvn-zp-sob-l-n-ota\\">První způsob - líný Ota <a href=\\"#prvn-zp-sob-l-n-ota\\">#</a></h2><p>Tento způsob zná asi úplně každý. Pro superrychlé vytvoření formuláře jej stačí nadefinovat v presenteru nějak takto:</p>
<pre><code class=\\"lang-php\\">protected function createComponentComplicatedForm(): \\\\Nette\\\\Application\\\\UI\\\\Form
{
  $form = new \\\\Nette\\\\Application\\\\UI\\\\Form;
  $form-&gt;addSelect(&#39;selectNo1&#39;, NULL, [&#39;Item 1&#39;, &#39;Item 2&#39;]);
  $form-&gt;addSubmit(&#39;send&#39;, &#39;Odeslat&#39;);
  $form-&gt;onSuccess[] = function (\\\\Nette\\\\Application\\\\UI\\\\Form $form, \\\\stdClass $values) {
    bdump($values);
    throw new \\\\Nette\\\\NotImplementedException;
  };
  return $form;
}
</code></pre>
<p>A použít v příslušné šabloně pomocí <code>control</code> makra:</p>
<pre><code>{control complicatedForm}
</code></pre><p>Je to velmi jednoduché řešení a prakticky se zase až tolik nepoužívá. Většina lidí přijde poměrně rychle na to, že potřebují daleko větší flexibilitu, kterou nabízí další způsob v pořadí. Podívejme se však co se děje když se takový formulář odešle. Plyne z toho totiž jedna důležitá vlastnost, na kterou bude potřeba myslet později.</p>
<p>Formulář se odesílá jako takový zvláštní signál s těmito POST daty:</p>
<pre><code>selectNo1=0&amp;send=Odeslat&amp;_do=complicatedForm-submit
</code></pre><p>V průběhu životního cyklu presenteru (před <code>beforeRender</code>) dojde ke zpracování tohoto signálu. Konkrétně se nad formulářem zavolá metoda <code>signalReceived</code> resp. v případě formuláře <code>fireEvents</code>. Poměrně záhy se zavolají základní validace všech formulářových prvků. Schválně jsem v příkladu zvolil select, protože je na něm hezky vidět, že kontroluje co uživatel odeslal v selectu za hodnoty. Pokud je odeslaná hodnota k dispozici v předem nadefinovaném formuláři, tak se vybere. Co se stane pokud uživatel (záškodník) odešle něco jiného?</p>
<pre><code>selectNo1=666&amp;send=Odeslat&amp;_do=complicatedForm-submit
</code></pre><p>V tomto případě metoda <code>getValue</code> vrátí hodnotu <code>NULL</code> a validace takového formuláře nebude úspěšná. To vyústí v chybovou hlášku <code>Please select a valid option.</code> - automaticky. Asi známá vlastnost a do chvíle než řeknu jinak bude platit.</p>
<h2 id=\\"druh-zp-sob-ne-astn-karel\\">Druhý způsob - nešťastný Karel <a href=\\"#druh-zp-sob-ne-astn-karel\\">#</a></h2><p>Zde se většina lidí zasekne a nádává. Protože vykreslování formuláře je v předchozím případě moc kostrbatá a vlastní PHP rendery nejsou moc nápomocné, přistoupíme k ručnímu vykreslování (místo <code>control</code> makra):</p>
<pre><code>{form complicatedForm}
  {input send}
{/form}
</code></pre><p>Už tady si většina lidí alespoň jednou vyláme zuby (já to dělám pravidelně). Předchozí kód totiž <strong>nebude fungovat</strong>. Formulář se ke vší smůle sice odešle, ale neudělá vůbec nic. Pro správné fungování je nutné vykreslit všechny formulářové prvky:</p>
<pre><code>{form complicatedForm}
  {input selectNo1}
  {input send}
{/form}
</code></pre><p>Proč? Co se děje? Tato definice formuláře totiž není správná. Nette ví, že má být ve formuláři select a má mít nějaké hodnoty, ale ty hodnoty nesedí s tím, co bylo odesláno (pamatujete?). Interně se skutečně vyhodí chyba <code>Please select a valid option.</code>, ale tu nikde nevykreslujeme, takže se zdá, že to prostě nefunguje. No fakt, vyzkoušejte si to:</p>
<pre><code class=\\"lang-html\\">{form complicatedForm}
  &lt;ul class=&quot;errors&quot; n:if=&quot;$form-&gt;hasErrors()&quot;&gt;
    &lt;li n:foreach=&quot;$form-&gt;errors as $error&quot;&gt;{$error}&lt;/li&gt;
  &lt;/ul&gt;
  {*{input selectNo1}*}
  {input send}
{/form}
</code></pre>
<p>Na to je třeba dávat velký bacha. Tento způsob je dostatečný snad pro všechno co je potřeba. Prakticky je však nevhodný...</p>
<h2 id=\\"t-et-zp-sob-kod-rka-silvie\\">Třetí způsob - kodérka Silvie <a href=\\"#t-et-zp-sob-kod-rka-silvie\\">#</a></h2><p>Je velká škoda, že o tomto způsobu neví spousta lidí co potkávám. Kodér většinou vymyslí nádhernou šablonu s formulářem (s mnohem komplikovanějším než je tento):</p>
<pre><code class=\\"lang-html\\">&lt;form action=&quot;&quot; method=&quot;post&quot; id=&quot;myAwesomeFormId&quot;&gt;
  &lt;select name=&quot;selectNo1&quot; id=&quot;myAwesomeSelectId&quot;&gt;
    &lt;option value=&quot;0&quot; selected=&quot;true&quot;&gt;Item 1&lt;/option&gt;
    &lt;option value=&quot;1&quot;&gt;Item 2&lt;/option&gt;
  &lt;/select&gt;
  &lt;input type=&quot;submit&quot; name=&quot;send&quot; value=&quot;Odeslat&quot;&gt;
&lt;/form&gt;
</code></pre>
<p>Teď se ale dostávám do problému, protože mám krásný formulář a měl bych jej zachovat. Mám však také jeho PHP definici a teď bych to potřeboval nějak naroubovat. Zde se stávají ty osudové chyby, kvůli kterým každý nadává - začne přepisování do druhého způsobu a hackování všeho co si kodér vymyslel. Když to dobře dopadne, tak bude formulář vypadat snad stejně jako vypadal původně. Snad...</p>
<p>To je ale zbytečné. Existuje lepší způsob pomocí <code>n:name</code> makra v Latte. Skutečně formulář pouze naroubujeme na ten v PHP a smažeme nepotřebné věci:</p>
<pre><code class=\\"lang-html\\">&lt;form n:name=&quot;complicatedForm&quot; id=&quot;myAwesomeFormId&quot;&gt;
  &lt;select n:name=&quot;selectNo1&quot; id=&quot;myAwesomeSelectId&quot;/&gt;
  &lt;input n:name=&quot;send&quot;/&gt;
&lt;/form&gt;
</code></pre>
<p>Formulář funguje pořád stejně, ale dokonce se i zjednodušil! No nicméně asi je z toho cítit, že pořád je na straně PHP dost práce (vlastně vešká potřebná zodpovědnost) a svoboda v šabloně je jen částečná. Zde přichází ke slovu poslední způsob.</p>
<h2 id=\\"-tvrt-zp-sob-bl-zniv-joe\\">Čtvrtý způsob - bláznivý Joe <a href=\\"#-tvrt-zp-sob-bl-zniv-joe\\">#</a></h2><p>Všechno dříve zmíněné se mi nemusí líbit. Kašlu na nějaké definice v PHP, kašlu na automatické kontroly. Chci prostě vzít formulář od kodéra, odeslat ho a sám si ho zpracovat. Je to tak těžké pochopit?! Není milý Joe. Co to udělat takto - začněme s naroubouváním formuláře (ale jen fomuláře!):</p>
<pre><code class=\\"lang-html\\">&lt;form n:name=complicatedForm id=&quot;myAwesomeFormId&quot;&gt;
  &lt;select name=&quot;selectNo1&quot; id=&quot;myAwesomeSelectId&quot;&gt;
    &lt;option value=&quot;0&quot; selected=&quot;true&quot;&gt;Item 1&lt;/option&gt;
    &lt;option value=&quot;1&quot;&gt;Item 2&lt;/option&gt;
  &lt;/select&gt;
  &lt;input type=&quot;submit&quot; name=&quot;send&quot; value=&quot;Odeslat&quot;&gt;
&lt;/form&gt;
</code></pre>
<p>Tím se zajistí, že se fomulář odešle na tu správnou adresu tou správnou metodou. Jinak jinak jsem do formuláře nezasáhl a je tedy úplně stejný, jako jej poslal kodér. Do puntíku. Veškerá data z formuláře jsou potom k dispozici zde:</p>
<pre><code class=\\"lang-php\\">protected function createComponentComplicatedForm(): \\\\Nette\\\\Application\\\\UI\\\\Form
{
  $form = new \\\\Nette\\\\Application\\\\UI\\\\Form;
  $form-&gt;onSuccess[] = function (\\\\Nette\\\\Application\\\\UI\\\\Form $form) {
    dump($form-&gt;getHttpData()); //ZDE
  };
  return $form;
}
</code></pre>
<p>Co se stane, když záškodník odešle něco co by nemělo v selectu být (viz první příklad)? Přesně tak, prostě se to odešle a na serveru to přistane. Veškerá kontrola je tedy na programátorovi. K samotné hodnotě selectu je možno přistouput takto:</p>
<pre><code class=\\"lang-php\\">$form-&gt;getHttpData($form::DATA_LINE, &#39;selectNo1&#39;)
</code></pre>
<p>To <code>DATA_LINE</code> je vhodné pro jednořádkové vstupy, protože se na pozadí provede následující ošetření:</p>
<pre><code class=\\"lang-php\\">\\\\Nette\\\\Utils\\\\Strings::trim(strtr($value, &quot;\\\\r\\\\n&quot;, &#39;  &#39;))
</code></pre>
<p>Pořád ale platí, že může přijít ze selectu nečekaná hodnota a nelze ničemu věřit. Jedná se však o naprosto svobodný způsob, který je možné kombinovat s předchozím. Pokud tedy máte <em>&quot;neskutečně složitý formulář&quot;</em>, který je <em>&quot;už nakódovaný&quot;</em> a jeho definice <em>&quot;má asi 500 řádek&quot;</em> a je to <em>&quot;tak komplikované, že se v tom nikdo nevyzná&quot;</em> a bylo by <em>&quot;lepší, kdybych si to mohl udělat sám&quot;</em>, tak vězte, že to jde.</p>
<h2 id=\\"-ast-dotazy\\">Časté dotazy <a href=\\"#-ast-dotazy\\">#</a></h2><ul>
<li>Použil jsi to někdy ve skutečnosti? Ano.</li>
<li>Je tam nějaký problém o kterém bych měl vědět? Krom již zmiňovaného nevím o žádném. Je to prostě růčo fůčo...</li>
<li>Proč to není v dokumentaci? <a href=\\"https://doc.nette.org/en/2.4/forms#toc-manual-rendering\\">Je to tam.</a></li>
<li>Proč není ten poslední způsob v dokumentaci? <a href=\\"https://doc.nette.org/en/2.4/forms#toc-low-level-forms\\">Je to tam.</a></li>
<li>Tak to tedy není v české verzi! I tam <a href=\\"https://doc.nette.org/cs/2.4/forms#toc-low-level-formulare\\">to</a> obojí <a href=\\"https://doc.nette.org/cs/2.4/forms#toc-manualni-vykreslovani\\">je</a></li>
<li>Tak to tam dřív nebylo. Je to tam <a href=\\"https://doc.nette.org/cs/2.1/forms\\">od verze 2.1</a>, kdy se tato možnost objevila.</li>
<li>I ve staré EN verzi? <a href=\\"https://doc.nette.org/en/2.1/forms\\">Ano</a></li>
<li>Šlo by to udělat i bez <code>getHttpData</code>? Ano, ale už v tom nevidím moc velký smysl.</li>
<li>Proč? To už bych mohl rovnou pracovat s <code>$_POST</code>, ale tato metoda mě pěkně odstíní a <a href=\\"https://api.nette.org/2.4/source-Forms.Form.php.html#385-403\\">ošetří celou řadu potřebných věcí</a>.</li>
<li>Ale ve <em>{$frameworkName}</em> se to dělá jinak a lépe! Použij tedy <em>{$frameworkName}</em> nebo jeho podčást.</li>
</ul>
<p>:)</p>
",
        }
      }
    />
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <strong>
        Do you have any comments? That's great!
         
        <span
          className="jsx-3140515621"
        >
          <a
            className="jsx-3140515621 "
            href="https://twitter.com/home?status=https%3A%2F%2Fzlml.cz%2F4-zpusoby-prace-s-formularem%20cc%20%40mrtnzlml"
          >
            Tweet them
          </a>
        </span>
         
        so everyone can hear you…
      </strong>
    </p>
    <p
      style={
        Object {
          "fontSize": "2rem",
          "hyphens": "auto",
          "textAlign": "justify",
        }
      }
    >
      <span
        className="jsx-3140515621"
      >
        <a
          className="jsx-3140515621"
          href="/archive"
          onClick={[Function]}
        >
          ← back to the archive
        </a>
      </span>
    </p>
  </div>
</div>
`;
